name: Azure Continuous Delivery
on:
  workflow_dispatch:
    inputs:
      IMAGE_REPOSITORY:
        description: 'Repository of the image (same as declared in App Service creation)'
        required: true
        default: 'api-vise'
      IMAGE_TAG:
        description: 'Tag of the image'
        required: true
        default: 'latest'
      AZURE_WEBAPP_NAME:
        description: 'Nombre del App Service creado en Azure'
        required: true
        default: 'vice1'
      PORT:
        description: 'Port of the application'
        default: '443'
        required: true
env:
  ACR_LOGIN_SERVER: ${{ secrets.ACR_NAME }}.azurecr.io
  IMAGE_URL: ${{ secrets.ACR_NAME }}.azurecr.io/${{ github.event.inputs.IMAGE_REPOSITORY }}:${{ github.event.inputs.IMAGE_TAG }}
  AZURE_WEBAPP_URL: vice1-fpevb6cqbxfgffcj.brazilsouth-01.azurewebsites.net
jobs:
  build-and-push-image:
    name: 'Build and Push to ACR'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Docker Login
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.ACR_NAME }}.azurecr.io
          username: ${{ secrets.ACR_NAME }}
          password: ${{ secrets.ACR_PASSWORD }}
      
      - name: Build and Push to ACR
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: ${{ env.IMAGE_URL }}
          file: Dockerfile
  
  deploy:
    name: 'Deploy remote container to Azure'
    runs-on: ubuntu-latest
    needs: build-and-push-image
    steps:
      - name: Deploy to Azure Web App for Container
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ github.event.inputs.AZURE_WEBAPP_NAME }}
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE_DANIEL_RAMIREZ_Y_JUAN_RAMIREZ }}
          images: ${{ env.IMAGE_URL }}
  
  test-deploy:
    name: 'Test deployed service'
    runs-on: ubuntu-latest
    needs: [build-and-push-image, deploy]
    steps:
      - name: Verify DNS resolution and wait for deployment
        run: |
          echo "Checking DNS resolution for ${{ env.AZURE_WEBAPP_URL }}..."
          
          # Wait for DNS to resolve
          for i in {1..10}; do
            if nslookup ${{ env.AZURE_WEBAPP_URL }} > /dev/null 2>&1; then
              echo "✓ DNS resolved successfully!"
              break
            fi
            echo "Attempt $i/10: DNS not resolved yet, waiting 5 seconds..."
            sleep 5
          done
          
          # Verify DNS was resolved
          if ! nslookup ${{ env.AZURE_WEBAPP_URL }}; then
            echo "ERROR: Could not resolve hostname. Please verify:"
            echo "  1. App Service URL is correct: ${{ env.AZURE_WEBAPP_URL }}"
            echo "  2. App Service exists in Azure"
            echo "  3. You have access to the subscription"
            exit 1
          fi
          
          echo "Waiting for container to start (60 seconds)..."
          sleep 60
          
          echo "Testing if the service is responding..."
          for i in {1..8}; do
            if curl -f -s -m 10 -o /dev/null https://${{ env.AZURE_WEBAPP_URL }}; then
              echo "✓ Service is ready and responding!"
              exit 0
            fi
            echo "Attempt $i/8: Service not ready yet, waiting 10 seconds..."
            sleep 10
          done
          
          echo "⚠ Service may not be fully ready, but proceeding with tests..."
      
      - name: Checkout session.hurl
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            session.hurl
          sparse-checkout-cone-mode: false
      
      - name: Setup hurl (API testing tool)
        uses: gacts/install-hurl@v1
      
      - name: Test API
        run: |
          hurl --variable host=https://${{ env.AZURE_WEBAPP_URL }} \
               --connect-timeout 15 \
               --retry 3 \
               --retry-interval 5000 \
               --error-format long \
               --verbose \
               --test session.hurl
