name: Azure Continuous Delivery

on:
  workflow_dispatch:
    inputs:
      IMAGE_REPOSITORY:
        description: 'Repository of the image (same as declared in App Service creation)'
        required: true
        default: 'api-vise'
      IMAGE_TAG:
        description: 'Tag of the image'
        required: true
        default: 'latest'
      AZURE_WEBAPP_NAME:
        description: 'Nombre del App Service creado en Azure'
        required: true
        default: 'vice1'
      PORT:
        description: 'Port of the application'
        default: '443'
        required: true

env:
  ACR_LOGIN_SERVER: ${{ secrets.ACR_NAME }}.azurecr.io
  IMAGE_URL: ${{ secrets.ACR_NAME }}.azurecr.io/${{ github.event.inputs.IMAGE_REPOSITORY }}:${{ github.event.inputs.IMAGE_TAG }}

jobs:
  build-and-push-image:
    name: 'Build and Push to ACR'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Docker Login
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.ACR_NAME }}.azurecr.io
          username: ${{ secrets.ACR_NAME }}
          password: ${{ secrets.ACR_PASSWORD }}
      
      - name: Build and Push to ACR
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: ${{ env.IMAGE_URL }}
          file: Dockerfile

  deploy:
    name: 'Deploy remote container to Azure'
    runs-on: ubuntu-latest
    needs: build-and-push-image
    steps:
      - name: Deploy to Azure Web App for Container
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ github.event.inputs.AZURE_WEBAPP_NAME }}
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE_DANIEL_RAMIREZ_Y_JUAN_RAMIREZ }}
          images: ${{ env.IMAGE_URL }}

  test-deploy:
    name: 'Test deployed service'
    runs-on: ubuntu-latest
    needs: [build-and-push-image, deploy]
    steps:
      - name: Wait for deployment to be ready
        run: |
          echo "Waiting for the container to start and be ready..."
          sleep 90
          
          echo "Testing if the service is accessible..."
          for i in {1..10}; do
            if curl -f -s -o /dev/null https://${{ github.event.inputs.AZURE_WEBAPP_NAME }}.azurewebsites.net; then
              echo "Service is ready!"
              exit 0
            fi
            echo "Attempt $i: Service not ready yet, waiting 15 more seconds..."
            sleep 15
          done
          
          echo "Service is ready (or timeout reached), proceeding with tests..."
      
      - name: Checkout session.hurl
        uses: actions/checkout@v3
        with:
          sparse-checkout: |
            session.hurl
          sparse-checkout-cone-mode: false
      
      - name: Setup hurl (API testing tool)
        uses: gacts/install-hurl@v1
      
      - name: Test API
        run: |
          hurl --variable host=https://${{ github.event.inputs.AZURE_WEBAPP_NAME }}.azurewebsites.net \
               --connect-timeout 30s \
               --retry 5 \
               --retry-interval 10000 \
               --error-format long \
               --verbose \
               --test session.hurl
